@page
@using Microsoft.AspNetCore.Identity
@using System.Data.SqlClient;
@using static FishingTrip.Pages.Shared._Common;
@using FishingTrip.Pages.Shared;
@model IndexModel
@inject SignInManager<IdentityUser> SignInManager;

@{
    ViewData["Title"] = "Home page";
}

<!DOCTYPE html>
<html lang="en">
<body onload="indexLoad()">
    <div class="text-center">
        <h1 class="display-4">FishingTrip</h1>
        <h2>For planning and tracking all of you fishing trips</h2>

        @*    Ideas as follows:
        Weather forecast for favourite spots
        See recent posts/fishing trips of friends and self*@

        @if (SignInManager.IsSignedIn(User))
        
        {
            //onload post to c#
            string[] week = nextDays(7);
            string userID = User.Claims.ElementAtOrDefault(0).Value;
            
            
            //remove_Favourite("Test");
            <h1>Recent Posts and fishing trips from friends</h1>

            <p>
                Creating a method to collect a certain number of posts from the database from friends and own user
                This could be harder to do because of the multiple database
                Use a combine function to add them all together?
            </p>

            <p>Insert recent friend posts here</p>
            //Find method to be able to find friends and then add there most recent posts similar to the old PHP style site

            <h1>Fishing location weather forecast</h1>
            <form id="checkDays" action="~/" method="post">
                <label>Days to compare:</label>
                @{
                    for (int i = 0; i < week.Length; i++)
                    {
                        if (week[i] != "")
                        {
                                    <label>&nbsp&nbsp&nbsp&nbsp</label>
                                    <label>@week[i]:</label>
                            if (i < 3)
                            {
                                        <input type="checkbox" name="dayChk" onclick="indexLoad()" value=@week[i] checked />
                            }
                            else
                            {
                                        <input type="checkbox" name="dayChk" onclick="indexLoad()" value=@week[i] />
                            }
                        }
                    }
                }
            </form>
            <h2>Find forecast for a fishing spot</h2>
            <form id="seachForSpot" method="post" action="~/">
                <input id="newSpotInput" name="newSpotInput" type="text" size="50" placeholder="Input fishing location here" />
                <input type="hidden" name="searchSpot" value="true" />
                <input id="newSpotSubmit" type="submit" value="Find forecast"/>
            </form>
            <br/>

            <ul class="favSpotList">
                @{
                    openLinuxConnection();
                    //Console.WriteLine("SearchList");
                    string[] searchedSpots = getSearchedSpots(userID);          
                    foreach (string spot in searchedSpots)
                    {
                        if (spot != "")
                        {
                            SpotForecast spotForecast = new SpotForecast('s',spot, userID);
                                <li style="background-color: lightslategrey;" name=@String.Concat("fav",spot.Replace(" ","_"))>
                                <h2 style="display:inline;">@spot</h2>
                                <form method="post" asp-page-handler="RemoveSearch">
                                    <input type="hidden" name="whichSpot" value="@spot"/>
                                    <button type="submit">Remove Search</button>
                                </form>
                                <div name="dayForecastDetails" id=@String.Concat(spot.Replace(" ","_"),"_Searched")>
                                    @{
                                        if (spotForecast.spotWeek.Keys.First() == "ToBeFound")
                                        {
                                            <div id=@(spot.Replace(" ","_")+"_Info") class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                                            <input type="hidden" name="emptySearchSpot" value="@spot.Replace(" ","_")" />
                                            addRequest(spot, userID, 's');
                                            //runTask(spot, "request", "FTW");
                                        }
                                        else if (spotForecast.spotWeek.Count() > 0 && spotForecast.spotWeek.Keys.First() != "Spot not found")
                                        {
                                            foreach (KeyValuePair<string, Hour[]> dayInfo in spotForecast.spotWeek)
                                            {
                                                if (dayInfo.Key != "Spot not found") //SHOULD BE ABLE TO REMOVE??
                                                {
                                                    ForecastDiv newdiv = new ForecastDiv(dayInfo);
                                                    @Html.Raw(newdiv.rawDiv);
                                                }
                                            }
                                        }
                                        else if (spotForecast.spotWeek.Keys.First() == "Spot not found")
                                        {
                                            <p>Spot was not found</p>
                                        }
                                }
                                </div>
                            </li>
                        }
                    }
                    closeLinuxConnection();
                }
            </ul>

            <h2>Conditions at your favourite fishing spots</h2>
            <ul class="favSpotList">
                @{  openLinuxConnection();
                    //Console.WriteLine("FavList");
                    string[] favSpots = getFavSpots(userID);
                    // this may need to change from a list. What I am aiming to do is have the conditions shown for the users favourite spots for easy comparison. This will require a loading animation while the server recieves and redirects the fishing spots forecast. This information is all passed with a JSON file for each day, for each spot, perhaps should limit to 3 spots initially.
                    foreach (string spot in favSpots)
                    {
                        if (spot != "")
                        {
                            SpotForecast spotForecast = new SpotForecast('f', spot, userID);
                            //START OF USING OBJECTS
                            <li name=@String.Concat("fav",spot.Replace(" ","_"))>
                                <h2>@spot</h2>
                                <div name="dayForecastDetails" id=@String.Concat(spot.Replace(" ","_"),"_Favourite")>
                                    @{                                        
                                        
                                        if (spotForecast.spotWeek.Keys.First() == "ToBeFound") //PROBLEMS WITH THIS SCRIPT CONTINUING TO RUN
                                        {
                                            <div id=@(spot.Replace(" ","_")+"_Info") class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                                            <input type="hidden" name="emptyFavSpot" value="@spot.Replace(" ","_")" />
                                            addRequest(spot, userID, 'f');
                                            //runTask(spot, "update", "");
                                        }
                                        else if (spotForecast.spotWeek.Count != 0 && spotForecast.spotWeek.Keys.First() != "Spot not found")
                                        {
                                            foreach (KeyValuePair<string, Hour[]> dayInfo in spotForecast.spotWeek)
                                            {
                                                if (dayInfo.Key != "Not Found")
                                                {
                                                    ForecastDiv newdiv = new ForecastDiv(dayInfo);
                                                    @Html.Raw(newdiv.rawDiv);
                                                }
                                            }
                                        }
                                        else if (spotForecast.spotWeek.Keys.First() == "Spot not found")
                                        {
                                            <p>Spot was not found</p>
                                        }
                                    }
                                </div>
                            </li>
                        }
                    }
                    closeLinuxConnection();
                }
            </ul>

            <form id="addFav" action="~/" method="post">
                <label>Add favourite fishing spot</label>
                <input type="text" name="favSpot" width="50" value="" />
                <input type="hidden" name="addFavourite" value="true" />
                <input type="submit" value="Add favourite" />
            </form>
            <form id="rmvFav" action="~/" method="post">
                <label>Remove a favourite fishing spot</label>
                <input type="text" name="rmvSpot" width="50" value="" />
                <input type="hidden" name="rmvFavourite" value="true" />
                <input type="submit" value="Remove favourite" />
            </form>
        }
        else
        {
                <h2>For tracking all of your fishing data</h2>

                <br></br>
                <h3>What this application is capable of:</h3>
                <ul>
                    <li class="list">Returns weather and wave information for you favourite fishing locations</li>
                    <li class="list">Recommends best fishing days for you based on fishing history</li>
                    <li class="list">Records your fishing trips for you and the conditions</li>
                </ul>
        }
        </div>

    </body>

    </html>

